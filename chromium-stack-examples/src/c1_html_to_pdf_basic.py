#!/usr/bin/env python
"""
Chromium Stack Example 1: Basic HTML to PDF conversion
Converts simple HTML content to PDF using Playwright/Chromium.
"""

from pathlib import Path
from typing import Optional
from playwright.sync_api import sync_playwright

# Configuration
ROOT = Path(__file__).resolve().parent.parent
BUILD = ROOT / "build"
BUILD.mkdir(exist_ok=True)
OUT = BUILD / "out_c1_basic.pdf"

# HTML content to convert
HTML_CONTENT = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic Report</title>
    <style>
        @page {
            size: A4;
            margin: 1in;
        }
        body {
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            color: #333;
        }
        .header {
            text-align: center;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .content {
            margin: 20px 0;
        }
        .footer {
            margin-top: 50px;
            font-size: 12px;
            text-align: center;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Basic Report</h1>
        <p>Generated using Chromium headless PDF generation</p>
    </div>

    <div class="content">
        <h2>Introduction</h2>
        <p>This document demonstrates basic PDF generation from HTML using Playwright and Chromium headless browser.</p>

        <h2>Features</h2>
        <ul>
            <li>High-fidelity rendering</li>
            <li>CSS support including @page rules</li>
            <li>Automatic page breaks</li>
            <li>Professional output quality</li>
        </ul>

        <h2>Technical Details</h2>
        <p>The PDF is generated by:</p>
        <ol>
            <li>Loading HTML content into Chromium browser</li>
            <li>Applying CSS styles and layout</li>
            <li>Converting the rendered page to PDF format</li>
            <li>Saving the result to disk</li>
        </ol>
    </div>

    <div class="footer">
        Generated on {{DATE}} | Chromium PDF Stack Example
    </div>
</body>
</html>
"""


def generate_basic_pdf(output_path: Optional[Path] = None) -> Path:
    """
    Generate a basic PDF from HTML content using Playwright/Chromium.

    Args:
        output_path: Optional custom output path. Defaults to OUT.

    Returns:
        Path to the generated PDF file.
    """
    if output_path is None:
        output_path = OUT

    print("üåê Starting Chromium browser...")
    print("üìÑ Loading HTML content...")

    with sync_playwright() as p:
        # Launch browser
        browser = p.chromium.launch()

        # Create new page
        page = browser.new_page()

        # Set content
        page.set_content(HTML_CONTENT)

        # Generate PDF
        print("üìä Generating PDF...")
        page.pdf(
            path=str(output_path),
            format="A4",
            print_background=True,
            prefer_css_page_size=True,
            margin={
                "top": "0.75in",
                "bottom": "0.75in",
                "left": "0.75in",
                "right": "0.75in"
            }
        )

        # Close browser
        browser.close()

    print(f"‚úÖ PDF generated: {output_path}")
    return output_path


def main():
    """Entry point"""
    try:
        result = generate_basic_pdf()
        print("
üéâ Success!"        print(f"   Output: {result}")
        print("   Method: Playwright/Chromium HTML‚ÜíPDF conversion"
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
